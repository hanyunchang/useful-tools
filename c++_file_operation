1. 打开/新建一个文件
   FILE* 风格: https://en.cppreference.com/w/cpp/io/c/fopen
   ifstream风格: https://en.cppreference.com/w/cpp/io/basic_fstream/open
   
2. 新建一个目录
   https://en.cppreference.com/w/cpp/filesystem/create_directory

3. 删除一个文件或目录
    https://en.cppreference.com/w/cpp/filesystem/remove

4. 获取文件的大小
   https://en.cppreference.com/w/cpp/filesystem/file_size

5. 按行向文件写入内容
   ifstream风格: https://en.cppreference.com/w/cpp/io/basic_fstream " << "
   FILE* 风格: https://en.cppreference.com/w/c/io/fputs 

6. 按行读取文件中的内容
   ifstream风格: https://en.cppreference.com/w/cpp/io/basic_fstream " >> "、std::getline ( https://en.cppreference.com/w/cpp/string/basic_string/getline )
   FILE* 风格: https://en.cppreference.com/w/c/experimental/dynamic/getline
              https://en.cppreference.com/w/c/io/fgets

7. 关闭一个文件
  ifstream风格: https://en.cppreference.com/w/cpp/io/basic_fstream close
  FILE* 风格:  https://en.cppreference.com/w/c/io/fclose
 



demo
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------#include <cstdio>
#include <cstdlib>
#include <stdio.h>
#include <stdlib.h>
#include <string>
#include <iostream>
static int func_open_file_write(){
    int is_ok = EXIT_FAILURE;
    //前提: 目录要存在
    FILE* fp = std::fopen("./tmp/test.txt", "w+");//没有则新建文件；有则文件被清空
    if(!fp) {
        std::perror("File opening failed");
        return is_ok;
    }
 
    int c; // note: int, not char, required to handle EOF
    while ((c = std::fgetc(fp)) != EOF) { // standard C I/O file reading loop
       std::putchar(c);
    }
 
    if (std::ferror(fp)) {
        std::puts("I/O error when reading");
    } else if (std::feof(fp)) {
        std::puts("End of file reached successfully");
        is_ok = EXIT_SUCCESS;
    }
 
    //write file
    int rc = fputs("Hello World", fp);

    if (rc == EOF){
        std::puts("IO error when fputs");
    }
    
    std::fclose(fp);
    return is_ok;
}

static int func_open_file_read(){
    int is_ok = EXIT_FAILURE;
    FILE* fp = std::fopen("./tmp/test.txt", "r");//没有则新建文件；有则文件被清空
    if(!fp) {
        std::perror("File opening failed");
        return is_ok;
    }
    
    char buf[20];
    if(fgets(buf, sizeof buf, fp) != NULL){
        printf("\"%s\"\n", buf);
        std::string str1(buf);
        std::cout << str1 << std::endl;
    }

    std::fclose(fp);
    return is_ok;
}

int main(){
    func_open_file_write();
    func_open_file_read();
}

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
